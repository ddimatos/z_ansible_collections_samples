###############################################################################
# Â© Copyright IBM Corporation 2020, 2021
###############################################################################
# This sample playbook demonstrates basic data set operations using modules
# included in the Red Hat Ansible Certified  Content for IBM Z core collection.
#
# Usage:
#  ansible-playbook -i <inventory> <playbook>
#
# Example:
#  ansible-playbook -i inventories data_set_basics.yml
#  ansible-playbook -i inventories data_set_basics.yml -v
#
#  Additional facts for this playbook can be configured to override the defaults
#  by reviewing the "Fact setting" section of this playbook, for example,
#  `data_set_name` and `system_name`.
#
# Requirements:
#   IBM z/OS core collection 1.2.0 or later
#
# Configure:
#   tgt_tmp_dir - this is the USS directory on the target which will be written
#                 to for this example.
#
# Optional:
#   data_set_name - this is the data set name that will be created during
#                   execution of this sample.
#   pds_name - this is the pds name that will be used during execution of this
#              sample.
#   system_name - this is the system name that will be used during this example,
#                 determined by executing `uname -n` on the target.
###############################################################################

---

- hosts: all
  collections:
    - ibm.ibm_zos_core
  gather_facts: false
  vars:
    tgt_tmp_dir: "/tmp/demo"
  environment: "{{ environment_vars }}"

  tasks:
    - name: Set names for sequential data set and pds for use by this sample
      set_fact:
        pds_name: "ANSIBLE.DEMO.PDSE"

    - name: Create a PDS
      zos_data_set:
        name: "{{ pds_name }}"
        type: pds
        size: 5M
        format: fba
        record_length: 100
        replace: yes
      register: result

    - name: Response for creating the PDS
      debug:
        msg: "{{ result }}"

    - name: Copy the local JCL to PDS member
      zos_copy:
        src: "{{ playbook_dir }}/files/HELLO.jcl"
        dest: "{{ pds_name }}(HELLO)"
        remote_src: false
      register: result

    - name: Response for copying JCL to {{ pds_name }}(HELLO)
      debug:
        msg: "{{ result }}"

    - name: Pause 30 seconds and review data set(s)
      pause:
        seconds: 10

    - name: Delete the data sets
      zos_data_set:
        batch:
          - name: "{{ pds_name }}"
            state: absent
      register: result

    - name: Response for deleting the data sets
      debug:
        msg: "{{ result }}"

    - name: Pause 10 seconds and review data set(s) are deleted
      pause:
        seconds: 10

    - name: Copy inline content to a sequential dataset ANSIBLE.SEQ.DATA.SET
      zos_copy:
        content: |
            //HELLO    JOB (T043JM,JM00,1,0,0,0),'HELLO WORLD - JRM',
            //             MSGCLASS=X,MSGLEVEL=1,NOTIFY=&SYSUID
            //STEP0001 EXEC PGM=IEBGENER
            //SYSIN    DD DUMMY
            //SYSPRINT DD SYSOUT=*
            //SYSUT1   DD *
            HELLO, WORLD
            /*
            //SYSUT2   DD SYSOUT=*
            //
        dest: ANSIBLE.DEMO.SUBMIT.SEQDS
        # volume: DIMATO
        force: True
      register: result

    - name: Response copy content into ANSIBLE.SEQ.DATA.SET
      debug:
        var: result

    - name: Pause 10 seconds and review data set(s) JCL content
      pause:
        seconds: 10

    # - name: Uncatalog a data set ANSIBLE.DEMO.SUBMIT.SEQDS if it is cataloged.
    #   zos_data_set:
    #     name: ANSIBLE.DEMO.SUBMIT.SEQDS
    #     state: uncataloged
    #   register: result

    # - name: Response uncataloged ANSIBLE.DEMO.SUBMIT.SEQDS
    #   debug:
    #     var: result

    - name: Submit data set ANSIBLE.DEMO.SUBMIT.SEQDS
      zos_job_submit:
        src: ANSIBLE.DEMO.SUBMIT.SEQDS
        location: DATA_SET
        volume: DIMATO
      register: result
    - name: Response for submit ANSIBLE.DEMO.SUBMIT.SEQDS
      debug:
        var: result

